knitr::opts_chunk$set(echo = FALSE) # This sets the `echo` option to FALSE for all code chunks
knitr::opts_chunk$set(results = 'show')
knitr::opts_chunk$set(warning = FALSE)
library(tm)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(stringr)
library(text2vec)
path<-getwd()
folder.path <- "../data/inaugurals/"
speeches<-list.files(path = folder.path, pattern = "*.txt")
prex.out<- substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
path<-getwd()
folder.path <- "../data/InauguralSpeeches/"
speeches<-list.files(path = folder.path, pattern = "*.txt")
prex.out<- substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
end_sentence<-numeric(length(speeches))
nwords<-numeric(length(speeches))
nc<-numeric(length(speeches))
words<-rep(NA, length(speeches))
for(i in 1:length(speeches)){
words[i]<-readLines(con = paste(substr(path, 1,nchar(path)-3),"data/inaugurals/", speeches[i], sep = ""))
#print(words)
words[i]<-gsub("M[rs][rs]?\\.?", "A", words[i])
words[i]<-gsub("\\.[A-Z0-9]", "\\. I", words[i])
end_sentence[i]<-length(gregexpr("[//.?!]", words[i])[[1]])
nwords[i]<-length(strsplit(words[i], split = " ")[[1]])
nc[i]<-nchar(words[i])
}
end_sentence<-numeric(length(speeches))
nwords<-numeric(length(speeches))
nc<-numeric(length(speeches))
words<-rep(NA, length(speeches))
for(i in 1:length(speeches)){
words[i]<-readLines(con = paste(substr(path, 1,nchar(path)-3),"data/InauguralSpeeches/", speeches[i], sep = ""))
#print(words)
words[i]<-gsub("M[rs][rs]?\\.?", "A", words[i])
words[i]<-gsub("\\.[A-Z0-9]", "\\. I", words[i])
end_sentence[i]<-length(gregexpr("[//.?!]", words[i])[[1]])
nwords[i]<-length(strsplit(words[i], split = " ")[[1]])
nc[i]<-nchar(words[i])
}
t_average_length<-data.frame(prex.out, end_sentence, nwords, averageLength = nwords/end_sentence, nc)
t<-t_average_length[order(t_average_length$averageLength),]
t_select<-t_average_length[c(1,18, 6, 40, 12, 20, 9),]
ggplot(data = t_select, aes(x = prex.out, y = averageLength))+
geom_bar(stat = "identity")+
ylab("Average sentence length")+
xlab("Some Presidents")+
labs(title="Average Sentence length of some Presidents")
date <-read.table(file = paste(substr(path, 1,nchar(path)-3),"data/InauguationDates.txt", sep =""), sep = "\t", header = TRUE)
info<-read.csv(paste(substr(path, 1,nchar(path)-3),"data/InaugurationInfo.csv", sep =""))
date <-read.table(file = paste(substr(path, 1,nchar(path)-3),"data/InauguationDates.txt", sep =""), sep = "\t", header = TRUE)
info<-read.csv(paste(substr(path, 1,nchar(path)-3),"data/InaugurationInfo.csv", sep =""))
info<-read.csv(paste(substr(path, 1,nchar(path)-3),"data/InaugurationInfo.csv", sep =""))
info$M<-paste(info$File, info$Term, sep = "-")
table<-merge(info, t_average_length, by.x = "M", by.y ="prex.out")
names(table)[2]<-"President"
table$date<-numeric(nrow(table))
date$PRESIDENT<-as.character(date$PRESIDENT)
table$President<-as.character(table$President)
for( i in 1 : nrow(info)){
table$President[i]<-gsub("[A-Z]\\.\\s", "", table$President[i])
for(j in 1:nrow(date)){
date$PRESIDENT[j]<-gsub("[A-Z]\\.\\s", "", date$PRESIDENT[j])
if(date$PRESIDENT[j] == table$President[i]){
if(table$Term[i] == 1){
table$date[i] <-as.character(date[j, 2])
} else if(table$Term[i] == 2){
table$date[i] <-as.character(date[j, 3])
} else if(table$Term[i] == 3){
table$date[i] <-as.character(date[j, 4])
} else{
table$date[i] <-as.character(date[j, 5])
}
}
}
}
table
date
info
table<-merge(info, t_average_length, by.x = "M", by.y ="prex.out")
table
info
info$M<-paste(info$File, info$Term, sep = "-")
info
t_average_length
path<-getwd()
folder.path <- "../data/InauguralSpeeches/"
speeches<-list.files(path = folder.path, pattern = "*.txt")
prex.out<- substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
end_sentence<-numeric(length(speeches))
nwords<-numeric(length(speeches))
nc<-numeric(length(speeches))
words<-rep(NA, length(speeches))
for(i in 1:length(speeches)){
words[i]<-readLines(con = paste(substr(path, 1,nchar(path)-3),"data/InauguralSpeeches/", speeches[i], sep = ""))
#print(words)
words[i]<-gsub("M[rs][rs]?\\.?", "A", words[i])
words[i]<-gsub("\\.[A-Z0-9]", "\\. I", words[i])
end_sentence[i]<-length(gregexpr("[//.?!]", words[i])[[1]])
nwords[i]<-length(strsplit(words[i], split = " ")[[1]])
nc[i]<-nchar(words[i])
}
t_average_length<-data.frame(prex.out, end_sentence, nwords, averageLength = nwords/end_sentence, nc)
t<-t_average_length[order(t_average_length$averageLength),]
t_select<-t_average_length[c(1,18, 6, 40, 12, 20, 9),]
ggplot(data = t_select, aes(x = prex.out, y = averageLength))+
geom_bar(stat = "identity")+
ylab("Average sentence length")+
xlab("Some Presidents")+
labs(title="Average Sentence length of some Presidents")
date <-read.table(file = paste(substr(path, 1,nchar(path)-3),"data/InauguationDates.txt", sep =""), sep = "\t", header = TRUE)
info<-read.csv(paste(substr(path, 1,nchar(path)-3),"data/InaugurationInfo.csv", sep =""))
info$M<-paste(info$File, info$Term, sep = "-")
table<-merge(info, t_average_length, by.x = "M", by.y ="prex.out")
names(table)[2]<-"President"
table$date<-numeric(nrow(table))
date$PRESIDENT<-as.character(date$PRESIDENT)
table$President<-as.character(table$President)
for( i in 1 : nrow(info)){
table$President[i]<-gsub("[A-Z]\\.\\s", "", table$President[i])
for(j in 1:nrow(date)){
date$PRESIDENT[j]<-gsub("[A-Z]\\.\\s", "", date$PRESIDENT[j])
if(date$PRESIDENT[j] == table$President[i]){
if(table$Term[i] == 1){
table$date[i] <-as.character(date[j, 2])
} else if(table$Term[i] == 2){
table$date[i] <-as.character(date[j, 3])
} else if(table$Term[i] == 3){
table$date[i] <-as.character(date[j, 4])
} else{
table$date[i] <-as.character(date[j, 5])
}
}
}
}
write.csv(table[, -ncol(table)], paste(substr(path, 1,nchar(path)-3),"output/inau_table.csv", sep =""))
table$date<-as.integer(substr(table$date, nchar(table$date)-3, nchar(table$date)))
table_1<-table[-which(table$date == 0), ]
#plot(table_1$date, table_1$averageLength)
ggplot(table_1)+
geom_point(mapping = aes(x = date, y = averageLength, colour=Party))+
xlab("Years")+
ylab("Average Sentence Length")+
labs(title="Average Sentence Length v.s Time")
summary(lm(averageLength~date, data = table_1))
ggplot(table_1)+
geom_point(mapping = aes(x = date, y = Words, colour=Party))+
xlab("Years")+
ylab("Total words in angurals")+
labs(title="Total Words v.s Time")
ggplot(table_1)+
geom_point(mapping = aes(x = date, y = nc/nwords, colour=Party))+
xlab("Years")+
ylab("Average words Length")+
labs(title="Average words Length v.s Time")
summary(lm(nc/nwords~date, data = table_1))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,control = list(weighting = function(x) weightTfIdf(x, normalize =FALSE),stopwords = TRUE))
ff.dtm=tidy(dtm)
era<-c(1789, 1849, 1918, 1945, 1991, 2018)
color<-c("Reds", "Blues", "BuGn", "Greens", "Greys")
#par(mfrow = c(2,1))
for(i in 1:5){
ff.1<-Corpus(VectorSource(words[which(table$date>=era[i] &table$date< era[i+1])]))
ff.1<-tm_map(ff.1, stripWhitespace)
ff.1<-tm_map(ff.1, content_transformer(tolower))
ff.1<-tm_map(ff.1, removeWords, stopwords("english"))
ff.1<-tm_map(ff.1, removeWords, c("will", "shall", "government", "people", "must", "can", "may", "one"))
ff.1<-tm_map(ff.1, removeWords, character(0))
ff.1<-tm_map(ff.1, removePunctuation)
tdm.1<-TermDocumentMatrix(ff.1)
tdm.tidy=tidy(tdm.1)
tdm.over1=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.over1$term, tdm.over1$`sum(count)`,
scale=c(4,0.5),
max.words=50,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,color[i]))
text(x = 0, y = 0, paste("From", era[i], "to", era[i+1]))
}
prep_fun <- function(x) {
x %>%
# make text lower case
str_to_lower %>%
# remove non-alphanumeric symbols
str_replace_all("[^[:alnum:]]", " ") %>%
# collapse multiple spaces
str_replace_all("\\s+", " ")
}
words_clean <- prep_fun(words)[-which(table$date == 0)]
word_set1<-words_clean[which(table$date>=1789 &table$date< 1849)]
word_set2<-words_clean[which(table$date>=1849 &table$date< 1918)]
word_set3<-words_clean[which(table$date>=1918 &table$date< 1945)]
word_set4<-words_clean[which(table$date>=1945 &table$date< 1991)]
word_set5<-words_clean[which(table$date>=1991 &table$date< 2018)]
it1 = itoken(word_set1, progressbar = FALSE)
it2 = itoken(word_set2, progressbar = FALSE)
it3 = itoken(word_set3, progressbar = FALSE)
it4 = itoken(word_set4, progressbar = FALSE)
it5 = itoken(word_set5, progressbar = FALSE)
it = itoken(words_clean, progressbar = FALSE)
v = create_vocabulary(it) %>%
prune_vocabulary(doc_proportion_max = 0.1, term_count_min = 5)
vectorizer = vocab_vectorizer(v)
dtm<-list()
dtm[[1]] = create_dtm(it1, vectorizer)
dtm[[2]] = create_dtm(it2, vectorizer)
dtm[[3]] = create_dtm(it3, vectorizer)
dtm[[4]] = create_dtm(it4, vectorizer)
dtm[[5]] = create_dtm(it5, vectorizer)
similarity<-matrix(nrow = 5, ncol =5)
for(i in 1:5){
for(j in 1:5){
s<-sim2(dtm[[i]], dtm[[j]], method = "jaccard", norm = "none")
if(i == j){
similarity[i, j]<-(sum(s)-i)/(ncol(s)*nrow(s)-i)
} else{
similarity[i, j]<-sum(s)/(ncol(s)*nrow(s))
}
}
}
similarity
colnames(similarity)<-c("1789-1849", "1849-1918", "1918-1945", "1945-1991", "1991-2017")
write.csv(similarity, paste(substr(path, 1,nchar(path)-3),"output/similarity matrix.csv", sep =""))
draw<-round(100 * similarity)
#draw
image(1:5, 1:5, draw,col = c("#ad9190", "#8d7f8e", "#505f7c", "#A50F15", "#6c6c84","#505f7c", "#505f7c","#3b4c68", "#253954", "#16223a"), ann = F, axes = FALSE)
text(rep(1:5, 5), rep(1:5, each = 5), round(similarity, digits = 3), col ="#eae6e7")
axis(3, at = 1:5, labels=colnames(similarity),srt=45,tick=FALSE, cex.axis = 1)
axis(2, at = 1:5, labels=colnames(similarity),srt=45,tick=FALSE, cex.axis = 0.5)
